template
  #app.container(ref='appContainer')
    #menu.layer(ref='menuLayer')
      .p.flex
        label Class Prevalente
        select(v-model='primaryValue' @change='setPrimary' v-bind:disabled='!selectedFeature')
          option(v-for='x in availableValues' v-bind:value='x.value') {{x.label}}

      .p.flex
        label Class Second Call
        select(v-model='secondaryValue' @change='setSecondary' v-bind:disabled='!selectedFeature')
          option(v-for='x in availableValues' v-bind:value='x.value') {{x.label}}

      .p.cf
        small.fr {{feature}}/{{availableFeatures.length}} features - cluster {{offset + 1}} from {{count}}
        button(@click='doPrev') Previous
        button(@click='doNext') Next
        button(@click='doAnswer' v-bind:disabled='!isComplete') Save

      details.p
        summary
          small SEE MAP / INFO
        .sm-flex
          img.fit(v-bind:src='referenceImage')
    #map.layer(ref='mapLayer')

script.
  import { DEFAULT_VALUES, DEFAULT_STYLES, featureFor, centroidFor, styleFor, latLng, getJSON } from './_utils.js';

  export default {
    data() {
      // FIXME: collect state for the current cluster as a matrix,
      // where each feature has its own answers...

      return {
        data: [],
        count: 0,
        offset: -1,
        feature: 0,
        username: null,
        primaryValue: null,
        secondaryValue: null,
        referenceImage: null,
        selectedFeature: null,
        availableValues: Object.keys(DEFAULT_VALUES).map(x => ({
          label: DEFAULT_VALUES[x],
          value: x,
        })),
      };
    },
    computed: {
      availableFeatures() {
        return this.data[this.offset]
          ? this.data[this.offset].features
          : [];
      },
      currentFeature() {
        return this.data[this.offset].features[this.feature - 1];
      },
      isComplete() {
        return this.data
          && this.offset >= 0
          && this.currentFeature
          && this.currentFeature.first_call >= 0
          && this.currentFeature.second_call >= 0;
      },
    },
    methods: {
      setFeature(feature) {
        this.primaryValue = this.currentFeature.first_call;
        this.secondaryValue = this.currentFeature.second_call;
      },
      setPrimary() {
        this.currentFeature.first_call = parseInt(this.primaryValue, 10);
      },
      setSecondary() {
        this.currentFeature.second_call = parseInt(this.secondaryValue, 10);
      },
      doPrev() {
        if (this.offset > 0) {
          this.offset = this.offset - 1;
        } else {
          this.offset = this.count - 1;
        }

        this.loadCluster();
      },
      doAnswer() {
        this.currentFeature.edited = true;

        this.$vectorSource.getFeatures().forEach(x => {
          if (x.getId() === this.selectedFeature) {
            x.setProperties(this.currentFeature);
            x.setStyle(DEFAULT_STYLES.complete);
          }
        });

        this.feature = 0;
        this.selectedFeature = null;
        this.primaryValue = null;
        this.secondaryValue = null;
      },
      doNext() {
        if (this.offset < this.count - 1) {
          this.offset = this.offset + 1;
        } else {
          this.offset = 0;
        }

        this.loadCluster();
      },
      centerFeatures(features) {
        const center = centroidFor(features);

        this.$mapSource.getView().setCenter(latLng(center));

        // FIXME: gmaps is not working fine with lat/lon values
        const latLon = center.join(',');
        const url = `https://static-maps.yandex.ru/1.x/?lang=en-US&ll=${latLon}&z=5&l=map&size=600,300&pt=${latLon},vkbkm`;

        this.referenceImage = url;
      },
      loadFeatures(result) {
        this.$vectorSource.clear();

        result.forEach(x => {
          this.$vectorSource.addFeatures(featureFor(x));
        });

        this.centerFeatures(result.map(x => x.data));
      },
      loadCluster() {
        this.$refs.appContainer.classList.add('blocked');

        const featureIds = this.availableFeatures.map(f => f.geoserver_id).join(',');

        return getJSON(`/layers?user=${this.username}&features=${featureIds}`)
          .then(x => {
            this.loadFeatures(this.availableFeatures.map((f, i) => ({
              data: x.features[i],
              edited: f.edited,
              first_call: f.first_call,
              second_call: f.second_call,
            })));
          })
          .then(() => {
            this.$refs.appContainer.classList.remove('blocked');
          });
      },
    },
    mounted() {
      // mount OL3 canvas
      const mapLayer = new ol.layer.Tile();

      this.$mapSource = new ol.Map({
        interactions: ol.interaction.defaults({
          mouseWheelZoom: false,
        }),
        controls: [
          new ol.control.ZoomSlider(),
        ],
        layers: [mapLayer],
        target: this.$refs.mapLayer,
        view: new ol.View({
          center: latLng([-99.133209, 19.432608]),
          zoom: 16,
          minZoom: 5,
        }),
      });

      this.$mapSource.on('click', e => {
        this.$vectorSource.getFeatures().forEach(x => {
          if (x.getId() === this.selectedFeature) {
            x.setStyle(styleFor(x));
          }
        });

        const pixel = this.$mapSource.getEventPixel(e.originalEvent);

        this.$mapSource.forEachFeatureAtPixel(pixel, feature => {
          this.selectedFeature = feature.getId();

          const id = parseInt(this.selectedFeature.split('.').pop(), 10);
          const f = this.availableFeatures
            .map((x, i) => (x.geoserver_id === id ? i : -1))
            .filter(x => x >= 0)[0];

          feature.setStyle(DEFAULT_STYLES.select);

          this.feature = f + 1;
          this.setFeature(feature);
        });
      });

      // TODO: change this dinamically!
      mapLayer.setSource(new ol.source.OSM());

      // mount vectors' canvas
      this.$vectorSource = new ol.source.Vector();

      const vectorLayer = new ol.layer.Vector({
        source: this.$vectorSource,
        style: styleFor,
      });

      this.$mapSource.addLayer(vectorLayer);
    },
  };
